// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package videoproto

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *BaseResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BaseResp[number], err)
}

func (x *BaseResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BaseResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.StatusMsg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *VideoBaseInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_VideoBaseInfo[number], err)
}

func (x *VideoBaseInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *VideoBaseInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.PlayUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *VideoBaseInfo) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.CoverUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *VideoBaseInfo) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *VideoInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_VideoInfo[number], err)
}

func (x *VideoInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.VideoId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *VideoInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v VideoBaseInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.VideoBaseInfo = &v
	return offset, nil
}

func (x *VideoInfo) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.LikeCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *VideoInfo) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.CommentCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *VideoInfo) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.IsFavorite, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *CreateVideoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateVideoReq[number], err)
}

func (x *CreateVideoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v VideoBaseInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.VideoBaseInfo = &v
	return offset, nil
}

func (x *CreateVideoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateVideoResp[number], err)
}

func (x *CreateVideoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *GetVideoListByUserIdReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetVideoListByUserIdReq[number], err)
}

func (x *GetVideoListByUserIdReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AppUserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetVideoListByUserIdReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetVideoListByUserIdResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetVideoListByUserIdResp[number], err)
}

func (x *GetVideoListByUserIdResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *GetVideoListByUserIdResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v VideoInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.VideoInfos = append(x.VideoInfos, &v)
	return offset, nil
}

func (x *GetVideoListByTimeReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetVideoListByTimeReq[number], err)
}

func (x *GetVideoListByTimeReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AppUserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetVideoListByTimeReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.LatestTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetVideoListByTimeReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Count, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetVideoListByTimeResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetVideoListByTimeResp[number], err)
}

func (x *GetVideoListByTimeResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *GetVideoListByTimeResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v VideoInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.VideoInfos = append(x.VideoInfos, &v)
	return offset, nil
}

func (x *GetVideoListByTimeResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.NextTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *LikeVideoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LikeVideoReq[number], err)
}

func (x *LikeVideoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *LikeVideoReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.VideoId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *LikeVideoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LikeVideoResp[number], err)
}

func (x *LikeVideoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *UnLikeVideoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UnLikeVideoReq[number], err)
}

func (x *UnLikeVideoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UnLikeVideoReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.VideoId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UnLikeVideoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UnLikeVideoResp[number], err)
}

func (x *UnLikeVideoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *GetLikeVideoListReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetLikeVideoListReq[number], err)
}

func (x *GetLikeVideoListReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AppUserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetLikeVideoListReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetLikeVideoListResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetLikeVideoListResp[number], err)
}

func (x *GetLikeVideoListResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v BaseResp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.BaseResp = &v
	return offset, nil
}

func (x *GetLikeVideoListResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v VideoInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.VideoInfos = append(x.VideoInfos, &v)
	return offset, nil
}

func (x *BaseResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *BaseResp) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.StatusCode)
	return offset
}

func (x *BaseResp) fastWriteField2(buf []byte) (offset int) {
	if x.StatusMsg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.StatusMsg)
	return offset
}

func (x *VideoBaseInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *VideoBaseInfo) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.UserId)
	return offset
}

func (x *VideoBaseInfo) fastWriteField2(buf []byte) (offset int) {
	if x.PlayUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.PlayUrl)
	return offset
}

func (x *VideoBaseInfo) fastWriteField3(buf []byte) (offset int) {
	if x.CoverUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.CoverUrl)
	return offset
}

func (x *VideoBaseInfo) fastWriteField4(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.Title)
	return offset
}

func (x *VideoInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *VideoInfo) fastWriteField1(buf []byte) (offset int) {
	if x.VideoId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.VideoId)
	return offset
}

func (x *VideoInfo) fastWriteField2(buf []byte) (offset int) {
	if x.VideoBaseInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.VideoBaseInfo)
	return offset
}

func (x *VideoInfo) fastWriteField3(buf []byte) (offset int) {
	if x.LikeCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.LikeCount)
	return offset
}

func (x *VideoInfo) fastWriteField4(buf []byte) (offset int) {
	if x.CommentCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.CommentCount)
	return offset
}

func (x *VideoInfo) fastWriteField5(buf []byte) (offset int) {
	if !x.IsFavorite {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 5, x.IsFavorite)
	return offset
}

func (x *CreateVideoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateVideoReq) fastWriteField1(buf []byte) (offset int) {
	if x.VideoBaseInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.VideoBaseInfo)
	return offset
}

func (x *CreateVideoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateVideoResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.BaseResp)
	return offset
}

func (x *GetVideoListByUserIdReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetVideoListByUserIdReq) fastWriteField1(buf []byte) (offset int) {
	if x.AppUserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.AppUserId)
	return offset
}

func (x *GetVideoListByUserIdReq) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.UserId)
	return offset
}

func (x *GetVideoListByUserIdResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetVideoListByUserIdResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.BaseResp)
	return offset
}

func (x *GetVideoListByUserIdResp) fastWriteField2(buf []byte) (offset int) {
	if x.VideoInfos == nil {
		return offset
	}
	for i := range x.VideoInfos {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.VideoInfos[i])
	}
	return offset
}

func (x *GetVideoListByTimeReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetVideoListByTimeReq) fastWriteField1(buf []byte) (offset int) {
	if x.AppUserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.AppUserId)
	return offset
}

func (x *GetVideoListByTimeReq) fastWriteField2(buf []byte) (offset int) {
	if x.LatestTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.LatestTime)
	return offset
}

func (x *GetVideoListByTimeReq) fastWriteField3(buf []byte) (offset int) {
	if x.Count == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.Count)
	return offset
}

func (x *GetVideoListByTimeResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetVideoListByTimeResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.BaseResp)
	return offset
}

func (x *GetVideoListByTimeResp) fastWriteField2(buf []byte) (offset int) {
	if x.VideoInfos == nil {
		return offset
	}
	for i := range x.VideoInfos {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.VideoInfos[i])
	}
	return offset
}

func (x *GetVideoListByTimeResp) fastWriteField3(buf []byte) (offset int) {
	if x.NextTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.NextTime)
	return offset
}

func (x *LikeVideoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *LikeVideoReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.UserId)
	return offset
}

func (x *LikeVideoReq) fastWriteField2(buf []byte) (offset int) {
	if x.VideoId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.VideoId)
	return offset
}

func (x *LikeVideoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *LikeVideoResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.BaseResp)
	return offset
}

func (x *UnLikeVideoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UnLikeVideoReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.UserId)
	return offset
}

func (x *UnLikeVideoReq) fastWriteField2(buf []byte) (offset int) {
	if x.VideoId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.VideoId)
	return offset
}

func (x *UnLikeVideoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UnLikeVideoResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.BaseResp)
	return offset
}

func (x *GetLikeVideoListReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetLikeVideoListReq) fastWriteField1(buf []byte) (offset int) {
	if x.AppUserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.AppUserId)
	return offset
}

func (x *GetLikeVideoListReq) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.UserId)
	return offset
}

func (x *GetLikeVideoListResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetLikeVideoListResp) fastWriteField1(buf []byte) (offset int) {
	if x.BaseResp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.BaseResp)
	return offset
}

func (x *GetLikeVideoListResp) fastWriteField2(buf []byte) (offset int) {
	if x.VideoInfos == nil {
		return offset
	}
	for i := range x.VideoInfos {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.VideoInfos[i])
	}
	return offset
}

func (x *BaseResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *BaseResp) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.StatusCode)
	return n
}

func (x *BaseResp) sizeField2() (n int) {
	if x.StatusMsg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.StatusMsg)
	return n
}

func (x *VideoBaseInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *VideoBaseInfo) sizeField1() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.UserId)
	return n
}

func (x *VideoBaseInfo) sizeField2() (n int) {
	if x.PlayUrl == "" {
		return n
	}
	n += fastpb.SizeString(2, x.PlayUrl)
	return n
}

func (x *VideoBaseInfo) sizeField3() (n int) {
	if x.CoverUrl == "" {
		return n
	}
	n += fastpb.SizeString(3, x.CoverUrl)
	return n
}

func (x *VideoBaseInfo) sizeField4() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(4, x.Title)
	return n
}

func (x *VideoInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *VideoInfo) sizeField1() (n int) {
	if x.VideoId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.VideoId)
	return n
}

func (x *VideoInfo) sizeField2() (n int) {
	if x.VideoBaseInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.VideoBaseInfo)
	return n
}

func (x *VideoInfo) sizeField3() (n int) {
	if x.LikeCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.LikeCount)
	return n
}

func (x *VideoInfo) sizeField4() (n int) {
	if x.CommentCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.CommentCount)
	return n
}

func (x *VideoInfo) sizeField5() (n int) {
	if !x.IsFavorite {
		return n
	}
	n += fastpb.SizeBool(5, x.IsFavorite)
	return n
}

func (x *CreateVideoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateVideoReq) sizeField1() (n int) {
	if x.VideoBaseInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.VideoBaseInfo)
	return n
}

func (x *CreateVideoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateVideoResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.BaseResp)
	return n
}

func (x *GetVideoListByUserIdReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetVideoListByUserIdReq) sizeField1() (n int) {
	if x.AppUserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.AppUserId)
	return n
}

func (x *GetVideoListByUserIdReq) sizeField2() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.UserId)
	return n
}

func (x *GetVideoListByUserIdResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetVideoListByUserIdResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.BaseResp)
	return n
}

func (x *GetVideoListByUserIdResp) sizeField2() (n int) {
	if x.VideoInfos == nil {
		return n
	}
	for i := range x.VideoInfos {
		n += fastpb.SizeMessage(2, x.VideoInfos[i])
	}
	return n
}

func (x *GetVideoListByTimeReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetVideoListByTimeReq) sizeField1() (n int) {
	if x.AppUserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.AppUserId)
	return n
}

func (x *GetVideoListByTimeReq) sizeField2() (n int) {
	if x.LatestTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.LatestTime)
	return n
}

func (x *GetVideoListByTimeReq) sizeField3() (n int) {
	if x.Count == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.Count)
	return n
}

func (x *GetVideoListByTimeResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetVideoListByTimeResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.BaseResp)
	return n
}

func (x *GetVideoListByTimeResp) sizeField2() (n int) {
	if x.VideoInfos == nil {
		return n
	}
	for i := range x.VideoInfos {
		n += fastpb.SizeMessage(2, x.VideoInfos[i])
	}
	return n
}

func (x *GetVideoListByTimeResp) sizeField3() (n int) {
	if x.NextTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.NextTime)
	return n
}

func (x *LikeVideoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *LikeVideoReq) sizeField1() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.UserId)
	return n
}

func (x *LikeVideoReq) sizeField2() (n int) {
	if x.VideoId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.VideoId)
	return n
}

func (x *LikeVideoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *LikeVideoResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.BaseResp)
	return n
}

func (x *UnLikeVideoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UnLikeVideoReq) sizeField1() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.UserId)
	return n
}

func (x *UnLikeVideoReq) sizeField2() (n int) {
	if x.VideoId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.VideoId)
	return n
}

func (x *UnLikeVideoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UnLikeVideoResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.BaseResp)
	return n
}

func (x *GetLikeVideoListReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetLikeVideoListReq) sizeField1() (n int) {
	if x.AppUserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.AppUserId)
	return n
}

func (x *GetLikeVideoListReq) sizeField2() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.UserId)
	return n
}

func (x *GetLikeVideoListResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetLikeVideoListResp) sizeField1() (n int) {
	if x.BaseResp == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.BaseResp)
	return n
}

func (x *GetLikeVideoListResp) sizeField2() (n int) {
	if x.VideoInfos == nil {
		return n
	}
	for i := range x.VideoInfos {
		n += fastpb.SizeMessage(2, x.VideoInfos[i])
	}
	return n
}

var fieldIDToName_BaseResp = map[int32]string{
	1: "StatusCode",
	2: "StatusMsg",
}

var fieldIDToName_VideoBaseInfo = map[int32]string{
	1: "UserId",
	2: "PlayUrl",
	3: "CoverUrl",
	4: "Title",
}

var fieldIDToName_VideoInfo = map[int32]string{
	1: "VideoId",
	2: "VideoBaseInfo",
	3: "LikeCount",
	4: "CommentCount",
	5: "IsFavorite",
}

var fieldIDToName_CreateVideoReq = map[int32]string{
	1: "VideoBaseInfo",
}

var fieldIDToName_CreateVideoResp = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_GetVideoListByUserIdReq = map[int32]string{
	1: "AppUserId",
	2: "UserId",
}

var fieldIDToName_GetVideoListByUserIdResp = map[int32]string{
	1: "BaseResp",
	2: "VideoInfos",
}

var fieldIDToName_GetVideoListByTimeReq = map[int32]string{
	1: "AppUserId",
	2: "LatestTime",
	3: "Count",
}

var fieldIDToName_GetVideoListByTimeResp = map[int32]string{
	1: "BaseResp",
	2: "VideoInfos",
	3: "NextTime",
}

var fieldIDToName_LikeVideoReq = map[int32]string{
	1: "UserId",
	2: "VideoId",
}

var fieldIDToName_LikeVideoResp = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_UnLikeVideoReq = map[int32]string{
	1: "UserId",
	2: "VideoId",
}

var fieldIDToName_UnLikeVideoResp = map[int32]string{
	1: "BaseResp",
}

var fieldIDToName_GetLikeVideoListReq = map[int32]string{
	1: "AppUserId",
	2: "UserId",
}

var fieldIDToName_GetLikeVideoListResp = map[int32]string{
	1: "BaseResp",
	2: "VideoInfos",
}
